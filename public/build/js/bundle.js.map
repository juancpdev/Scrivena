{"version":3,"sources":["alertas.js","app.js","clientesContrato.js","graficos.js","tradingview-widget.js"],"names":["confirmDelete","event","id","preventDefault","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","document","getElementById","submit","menu","btnFlotante","querySelector","addEventListener","classList","contains","remove","add","carrouselInicio","carrusel","elementos","querySelectorAll","navContainer","startX","indiceActual","isDragging","actualizarNavDots","forEach","dot","index","toggle","moverSiguiente","length","actualizarCarrusel","offset","element","style","transform","_","createElement","moveToIndex","appendChild","e","touches","clientX","moveX","diffX","Math","abs","moverAnterior","setInterval","idiomas","languageToggle","circle","urlSearchParams","URLSearchParams","window","location","search","updateCirclePosition","langParam","get","newLang","set","newUrl","origin","pathname","toString","setTimeout","href","alertaFormulario","alerta","seleccionarFecha","fechaInicio","fechaFin","validarDiaSeleccionado","target","inputFecha","claseAlerta","partesFecha","value","split","parseInt","mostrarAlerta","mensaje","tipo","elemento","alertaPrevia","innerHTML","inputCliente","clientes","clientesFiltrados","inputHiddenCliente","listadoClientes","async","respuesta","fetch","resultado","map","cliente","nombre","trim","apellido","formatearClientes","json","obtenerClientes","busqueda","expresion","RegExp","replace","filter","toLowerCase","normalize","getElementsByTagName","firstChild","removeChild","clienteHTML","textContent","dataset","clienteId","onclick","seleccionarCliente","noResultado","mostrarClientes","iniciarApp","url","obtenerCliente","clienteDOM","clientePrevio","grafica","balanceTotal","obtenerDatos","contratos","inversiones","reduce","total","contrato","parseFloat","inversion","intereses","interes","totalFormateado","toFixed","totalConComa","lang","ctx","getContext","Chart","type","data","labels","datasets","backgroundColor","options","plugins","legend","display","tooltip","callbacks","label","context","parsed","Intl","NumberFormat","currency","format","gaficoTipos","tiposTotal","tipos","push","labelMap","conteoTipos","Array","fill","undefined","totalTipos","gaficoPaises","paisesTotal","paises","paisesUnicos","pais","paisesSinRepetir","conteoPaises","arregloFinal","Object","values","cajaSection","container","className","widget","parentNode","insertBefore","nextSibling","script","src"],"mappings":"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","file":"bundle.js","sourcesContent":["function confirmDelete(event, id) {\r\n\r\n    event.preventDefault(); // Previne el envío del formulario inmediatamente\r\n\r\n    Swal.fire({\r\n        title: 'Confirmación',\r\n        text: '¿Estás seguro de que deseas eliminar este registro?',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Sí, eliminar',\r\n        cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n        if (result.isConfirmed) {\r\n            document.getElementById(id).submit();\r\n        }\r\n    });\r\n}","document.addEventListener(\"DOMContentLoaded\", function () {\r\n  menu();\r\n  carrouselInicio();\r\n  idiomas();\r\n  alertaFormulario();\r\n  seleccionarFecha();\r\n});\r\n\r\nfunction menu() {\r\n  const btnFlotante = document.querySelector(\".abrir_menu\");\r\n  const menu = document.querySelector(\".caja_nav\");\r\n\r\n  if(btnFlotante) {\r\n    btnFlotante.addEventListener(\"click\", abrirCerrarMenu);\r\n\r\n    function abrirCerrarMenu() {\r\n      if (menu.classList.contains(\"activo\")) {\r\n        menu.classList.remove(\"activo\");\r\n        btnFlotante.classList.remove(\"activo\");\r\n      } else {\r\n        menu.classList.add(\"activo\");\r\n        btnFlotante.classList.add(\"activo\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction carrouselInicio() {\r\n  const carrusel = document.querySelector(\".carrusel\");\r\n  const elementos = document.querySelectorAll(\".carrusel .elemento\");\r\n  const navContainer = document.querySelector(\".carrusel-nav\");\r\n  let indiceActual = 0;\r\n  let startX;\r\n  let isDragging = false;\r\n\r\n  if (carrusel) {\r\n    // Crear puntos de navegación\r\n    elementos.forEach((_, index) => {\r\n      const dot = document.createElement(\"div\");\r\n      dot.classList.add(\"nav-dot\");\r\n      if (index === 0) {\r\n        dot.classList.add(\"active\"); // Establecer el primer punto como activo\r\n      }\r\n      dot.addEventListener(\"click\", () => {\r\n        moveToIndex(index);\r\n      });\r\n      navContainer.appendChild(dot);\r\n    });\r\n\r\n    // Función para mover el carrusel a un índice específico y actualizar los puntos\r\n    function moveToIndex(index) {\r\n      indiceActual = index;\r\n      actualizarCarrusel();\r\n      actualizarNavDots();\r\n    }\r\n\r\n    // Función para actualizar los puntos de navegación\r\n    function actualizarNavDots() {\r\n      navContainer.querySelectorAll(\".nav-dot\").forEach((dot, index) => {\r\n        dot.classList.toggle(\"active\", index === indiceActual);\r\n      });\r\n    }\r\n\r\n    // Funciones para el deslizamiento táctil\r\n    carrusel.addEventListener(\"touchstart\", (e) => {\r\n      startX = e.touches[0].clientX;\r\n      isDragging = true;\r\n    });\r\n\r\n    carrusel.addEventListener(\"touchmove\", (e) => {\r\n      if (isDragging) {\r\n        const moveX = e.touches[0].clientX;\r\n        const diffX = moveX - startX;\r\n        if (Math.abs(diffX) > 30) {\r\n          if (diffX > 0) {\r\n            moverAnterior();\r\n          } else {\r\n            moverSiguiente();\r\n          }\r\n          startX = moveX;\r\n          isDragging = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    carrusel.addEventListener(\"touchend\", () => {\r\n      isDragging = false;\r\n    });\r\n\r\n    // Función para mover al siguiente elemento\r\n    function moverSiguiente() {\r\n      if (indiceActual < elementos.length - 1) {\r\n        indiceActual++;\r\n      } else {\r\n        indiceActual = 0;\r\n      }\r\n      actualizarCarrusel();\r\n      actualizarNavDots();\r\n    }\r\n\r\n    // Función para mover al elemento anterior\r\n    function moverAnterior() {\r\n      if (indiceActual > 0) {\r\n        indiceActual--;\r\n      } else {\r\n        indiceActual = elementos.length - 1;\r\n      }\r\n      actualizarCarrusel();\r\n      actualizarNavDots();\r\n    }\r\n\r\n    // Función para actualizar el carrusel\r\n    function actualizarCarrusel() {\r\n      const offset = -indiceActual * 100;\r\n      elementos.forEach((element) => {\r\n        element.style.transform = `translateX(${offset}%)`;\r\n      });\r\n    }\r\n\r\n    // Establecer intervalo para cambiar al siguiente elemento cada 4 segundos\r\n    setInterval(moverSiguiente, 5000);\r\n  }\r\n}\r\n\r\nfunction idiomas() {\r\n  const languageToggle = document.querySelector(\".language-toggle\");\r\n  const circle = document.querySelector(\".circle\");\r\n\r\n  if (languageToggle) {\r\n    // Obtener el parámetro de idioma actual de la URL\r\n    const urlSearchParams = new URLSearchParams(window.location.search);\r\n\r\n    // Función para actualizar la posición del círculo según el idioma\r\n    function updateCirclePosition() {\r\n      const langParam = urlSearchParams.get(\"lang\");\r\n\r\n      if (langParam === \"es\") {\r\n        circle.style.transform = \"translate(0, -50%)\";\r\n      } else if (langParam === \"en\") {\r\n        circle.style.transform = \"translate(100%, -50%)\";\r\n      }\r\n    }\r\n\r\n    // Toggle del botón y actualización de la posición del círculo al hacer clic\r\n    languageToggle.addEventListener(\"click\", function () {\r\n      languageToggle.classList.toggle(\"active\");\r\n\r\n      // Obtener el parámetro de idioma actual de la URL\r\n      const currentLang = urlSearchParams.get(\"lang\");\r\n\r\n      // Cambiar el parámetro de idioma entre 'es' y 'en'\r\n      const newLang = currentLang === \"es\" ? \"en\" : \"es\";\r\n\r\n      // Actualizar la URL con el nuevo parámetro de idioma\r\n      urlSearchParams.set(\"lang\", newLang);\r\n      const newUrl = `${window.location.origin}${window.location.pathname}?${urlSearchParams.toString()}`;\r\n\r\n      // Actualizar la posición del círculo después de un pequeño retraso\r\n      setTimeout(() => {\r\n        updateCirclePosition();\r\n      }, 300); // Ajusta el valor del retraso según sea necesario\r\n\r\n      // Actualizar la URL sin recargar completamente la página\r\n      setTimeout(() => {\r\n        window.location.href = newUrl;\r\n      }, 600);\r\n    });\r\n\r\n    \r\n    updateCirclePosition();\r\n  }\r\n}\r\n\r\n// Alerta Formulario\r\nfunction alertaFormulario() {\r\n  const alertas = document.querySelectorAll(\".desaparecer-alerta\");\r\n\r\n  alertas.forEach(alerta => {\r\n    if(alerta) {\r\n      setTimeout(() => {\r\n        alerta.remove();\r\n      }, 4000);\r\n    }\r\n  });\r\n}\r\n\r\nfunction seleccionarFecha() {\r\n  const fechaInicio = document.getElementById('fechaInicio');\r\n  const fechaFin = document.getElementById('fechaFin');\r\n  \r\n    if (fechaInicio) {\r\n      fechaInicio.addEventListener('input', function(e) {\r\n        validarDiaSeleccionado(e.target, \".alerta-fechainicio\");\r\n      });\r\n    }\r\n\r\n    if (fechaFin) {\r\n      fechaFin.addEventListener('input', function(e) {\r\n        validarDiaSeleccionado(e.target, \".alerta-fechafin\");\r\n      });\r\n    }\r\n  }\r\n\r\n  function validarDiaSeleccionado(inputFecha, claseAlerta) {\r\n    const partesFecha = inputFecha.value.split('-'); // Dividir la cadena de fecha en día, mes y año\r\n    const diaSeleccionado = parseInt(partesFecha[2], 10); // Obtener el día del mes como un número entero\r\n  \r\n    // Verificar si el día seleccionado es mayor que 28\r\n    if (diaSeleccionado > 28) {\r\n      mostrarAlerta('Elegir fecha entre el 1 y el 28', 'error', claseAlerta);\r\n      inputFecha.value = \"\"; // Limpiar el campo de fecha\r\n    }\r\n  }\r\n\r\n/* MOSTRAR ALERTA */\r\nfunction mostrarAlerta(mensaje, tipo, elemento) {\r\n  // Previene que se genere mas de 1 alerta\r\n  const alertaPrevia = document.querySelector(\".alerta\");\r\n  if(alertaPrevia) {\r\n    alertaPrevia.remove();\r\n  };\r\n  \r\n  // Scripting para crear la alerta\r\n  const alerta = document.createElement(\"DIV\");\r\n  alerta.classList.add(\"alerta\", `alerta__${tipo}`);\r\n  alerta.innerHTML = mensaje;\r\n  \r\n  const referencia = document.querySelector(elemento);\r\n  referencia.appendChild(alerta);\r\n\r\n  setTimeout(() => {\r\n      alerta.remove();\r\n  }, 3000);\r\n\r\n}","(function () {\r\n    const inputCliente = document.querySelector(\"#clienteContrato\");\r\n\r\n    if(inputCliente) {\r\n        let clientes = [];\r\n        let clientesFiltrados = [];\r\n\r\n        const inputHiddenCliente = document.querySelector(\"[name=inversionista_id]\");\r\n        const listadoClientes = document.querySelector(\"#listado-clientes\");\r\n\r\n        obtenerClientes();\r\n        inputCliente.addEventListener('input', buscarClientes);\r\n\r\n        if(inputHiddenCliente.value) {\r\n\r\n            async function iniciarApp() {\r\n                const cliente = await obtenerCliente(inputHiddenCliente.value);\r\n\r\n                const {nombre, apellido} = cliente;\r\n\r\n                const clienteDOM = document.createElement('LI');\r\n                clienteDOM.classList.add(\"listado-clientes__cliente\", \"listado-clientes__cliente--seleccionado\", \"listado-clientes__cliente--con-margen\");\r\n                clienteDOM.textContent = `${nombre} ${apellido}`;\r\n                \r\n                listadoClientes.appendChild(clienteDOM);\r\n\r\n                // Estilos al label\r\n                // labelCliente.classList.add('formulario__label--li');\r\n                // inputCliente.addEventListener('input', verificarElementos);\r\n\r\n            }\r\n\r\n            function verificarElementos() {\r\n                    \r\n                if (listadoClientes.getElementsByTagName('li').length > 0) {\r\n                    labelCliente.classList.add('formulario__label--li');\r\n\r\n                } else {\r\n                    labelCliente.classList.remove('formulario__label--li');\r\n                }\r\n            }\r\n\r\n            iniciarApp();\r\n            inputCliente.addEventListener('input', iniciarApp);\r\n        }\r\n\r\n        async function obtenerClientes() {\r\n            const url = '/api/clientes'\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            formatearClientes(resultado);\r\n        }\r\n\r\n        async function obtenerCliente(id) {\r\n            const url = `/api/cliente?id=${id}`;\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n        \r\n            return resultado;\r\n        }\r\n        \r\n        function formatearClientes(resultado = []) {\r\n            clientes = resultado.map( cliente => {\r\n                return {\r\n                    nombre: `${cliente.nombre.trim()} ${cliente.apellido.trim()}`,\r\n                    id: cliente.id\r\n                }\r\n            });\r\n        }\r\n\r\n        // Función para escapar caracteres especiales de una cadena\r\n        function escapeRegExp(str) {\r\n            return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n        }\r\n\r\n        function buscarClientes(e) {\r\n            const busqueda = e.target.value;\r\n        \r\n            if (busqueda.length > 3) {\r\n                // Utilizar escapeRegExp para tratar la entrada del usuario como literal en la expresión regular\r\n                const expresion = new RegExp(escapeRegExp(busqueda), \"i\");\r\n        \r\n                clientesFiltrados = clientes.filter(cliente => {\r\n                    // Utilizar normalize para tratar caracteres acentuados\r\n                    const nombreNormalizado = cliente.nombre.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n                    \r\n                    if (nombreNormalizado.search(expresion) !== -1) {\r\n                        return cliente;\r\n                    }\r\n                });\r\n            } else {\r\n                clientesFiltrados = [];\r\n            }\r\n        \r\n        mostrarClientes();\r\n        }\r\n        \r\n        function mostrarClientes() {\r\n\r\n            // Agrega un evento al input para detectar cambios\r\n            inputCliente.addEventListener(\"input\", function() {\r\n                if (listadoClientes.getElementsByTagName(\"li\").length > 0) {\r\n                    listadoClientes.classList.add(\"listado-clientes__cliente--con-margen\");\r\n                } else {\r\n                    listadoClientes.classList.remove(\"listado-clientes__cliente--con-margen\");\r\n                }\r\n            });\r\n\r\n            while(listadoClientes.firstChild) {\r\n                listadoClientes.removeChild(listadoClientes.firstChild)\r\n            }\r\n\r\n            if(clientesFiltrados.length > 0) {\r\n                clientesFiltrados.forEach( cliente => {\r\n                    const clienteHTML = document.createElement('LI');\r\n                    clienteHTML.classList.add(\"listado-clientes__cliente\");\r\n                    clienteHTML.textContent = cliente.nombre;\r\n                    clienteHTML.dataset.clienteId = cliente.id;\r\n                    clienteHTML.onclick = seleccionarCliente;\r\n        \r\n                    listadoClientes.appendChild(clienteHTML);\r\n                });\r\n            } else if (inputCliente.value.length > 3) {\r\n                const noResultado = document.createElement('P');\r\n                noResultado.classList.add('listado-clientes__no-resultado');\r\n                noResultado.textContent = 'No hay resultados para tu búsqueda';\r\n                \r\n                listadoClientes.appendChild(noResultado);\r\n            \r\n            }\r\n                \r\n        }\r\n\r\n        function seleccionarCliente(e) {\r\n            const cliente = e.target;\r\n\r\n            const clientePrevio = document.querySelector(\".listado-clientes__cliente--seleccionado\");\r\n\r\n            if(clientePrevio) {\r\n                clientePrevio.classList.remove(\"listado-clientes__cliente--seleccionado\");\r\n            }\r\n\r\n            cliente.classList.add(\"listado-clientes__cliente--seleccionado\");\r\n            \r\n            inputHiddenCliente.value = cliente.dataset.clienteId;\r\n        }\r\n    \r\n    }\r\n\r\n})();","(function() {\r\n    const grafica = document.querySelector('#inversion-grafica');\r\n    const balanceTotal = document.querySelector('#balance-total');\r\n    if(grafica) {\r\n        obtenerDatos();\r\n\r\n        async function obtenerDatos() {\r\n            const url = '/api/contratos';\r\n            const respuesta = await fetch(url);\r\n            const contratos = await respuesta.json();\r\n\r\n            const inversiones = contratos.reduce((total, contrato) => total + parseFloat(contrato.inversion), 0);\r\n            const intereses = contratos.reduce((total, contrato) => total + parseFloat(contrato.interes), 0);\r\n\r\n            function formatNumber(num) {\r\n                return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n            }\r\n            \r\n            var total = inversiones + intereses;\r\n            var totalFormateado = total.toFixed(2);\r\n            var totalConComa = formatNumber(totalFormateado);\r\n            balanceTotal.textContent = \"$\" + totalConComa;\r\n\r\n\r\n            // Obtener la URL actual\r\n            var urlParams = new URLSearchParams(window.location.search);\r\n\r\n            // Obtener el valor del parámetro \"lang\"\r\n            var lang = urlParams.get('lang');\r\n            \r\n\r\n            const ctx = document.getElementById('inversion-grafica').getContext('2d');\r\n            const myChart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: ['Inversiones', 'Interés'],\r\n                    datasets: [{\r\n                        data: [inversiones, intereses],\r\n                        backgroundColor: [\r\n                            '#123c49',\r\n                            '#30aeb9'\r\n                        ]\r\n                    }]\r\n                },\r\n                options: {\r\n                    plugins: {\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function(context) {\r\n                                    let label = context.dataset.label || '';\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed !== 'undefined') {\r\n                                        if (context.label === \"Inversiones\") {\r\n                                            if(lang === \"es\") {\r\n                                                label += 'Inversiónes: ';\r\n                                            } else if(lang === \"en\") {\r\n                                                label += 'Investments: ';\r\n                                            }\r\n                                        } else if (context.label === \"Interés\"){\r\n                                            if(lang === \"es\") {\r\n                                                label += 'Interéses: ';\r\n                                            } else if(lang === \"en\") {\r\n                                                label += 'Interests: ';\r\n                                            }\r\n                                        }\r\n                                        label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                \r\n            });\r\n        }\r\n    }\r\n\r\n    const gaficoTipos = document.querySelector('#tipos-grafica');\r\n    const tiposTotal = document.querySelector('#tipos-total');\r\n    if(gaficoTipos) {\r\n        obtenerDatos();\r\n\r\n        async function obtenerDatos() {\r\n            const url = '/api/contratostotal';\r\n            const respuesta = await fetch(url);\r\n            const contratos = await respuesta.json();\r\n            const tipos = [];\r\n            contratos.forEach(contrato => {\r\n                const tipo = contrato.tipo;\r\n                tipos.push(tipo);\r\n            });\r\n\r\n            const labels = ['Inversión en Minería', 'Desarrollos Inmobiliarios', 'Fondos de Inversión USA', 'Remates Inmobiliarios'];\r\n\r\n\r\n            // Crear un objeto para mapear cada tipo de contrato a su índice en el array de labels\r\n            const labelMap = {};\r\n            labels.forEach((label, index) => {\r\n                labelMap[label] = index;\r\n            });\r\n            \r\n            // Inicializar un array de conteo de tipos con ceros\r\n            const conteoTipos = Array(labels.length).fill(0);\r\n            \r\n            // Contar cuántas veces aparece cada tipo en el array 'tipos' y actualizar el array de conteo\r\n            tipos.forEach(tipo => {\r\n                const index = labelMap[tipo];\r\n                if (index !== undefined) {\r\n                    conteoTipos[index]++;\r\n                }\r\n            });\r\n\r\n            let totalTipos = 0;\r\n\r\n            conteoTipos.forEach(total => {\r\n                totalTipos += total;\r\n            })\r\n\r\n            tiposTotal.textContent = totalTipos;\r\n\r\n            const ctx = document.getElementById('tipos-grafica').getContext('2d');\r\n            const myChart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: ['Inversión en Minería', 'Desarrollos Inmobiliarios', 'Fondos de Inversión USA', 'Remates Inmobiliarios'],\r\n                    datasets: [{\r\n                        data: conteoTipos,\r\n                        backgroundColor: [\r\n                            '#87A09B',\r\n                            '#4D686F',\r\n                            '#6D929B',\r\n                            '#314E52',\r\n                            '#659597',\r\n                            '#A2B3A4',\r\n                            '#566F7E',\r\n                            '#829CA5',\r\n                            '#4E6A71',\r\n                            '#3E5055'\r\n                        ]\r\n                    }]\r\n                },\r\n                options: {\r\n                    plugins: {\r\n                        legend: {\r\n                            display: false\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const gaficoPaises = document.querySelector('#paises-grafica');\r\n    const paisesTotal = document.querySelector('#paises-total');\r\n    if(gaficoPaises) {\r\n        obtenerDatos();\r\n\r\n        async function obtenerDatos() {\r\n            const url = '/api/clientes';\r\n            const respuesta = await fetch(url);\r\n            const clientes = await respuesta.json();\r\n            const paises = [];\r\n            const pais = clientes.forEach( cliente => {\r\n                paises.push(cliente.pais);\r\n            });\r\n\r\n            // Objeto auxiliar para hacer un seguimiento de los países únicos\r\n            const paisesUnicos = {};\r\n\r\n            // Filtrar los elementos duplicados y construir un nuevo arreglo con elementos únicos\r\n            const paisesSinRepetir = paises.filter(pais => {\r\n                // Si el país no ha sido visto antes, marcarlo como visto en el objeto auxiliar y retornar true\r\n                if (!paisesUnicos[pais]) {\r\n                    paisesUnicos[pais] = true;\r\n                    return true;\r\n                }\r\n                // Si el país ya ha sido visto antes, retornar false para filtrarlo\r\n                return false;\r\n            });\r\n            \r\n            // Objeto auxiliar para contar cuántas veces aparece cada país\r\n            const conteoPaises = {};\r\n            \r\n            // Contar cuántas veces aparece cada país en el arreglo original\r\n            paises.forEach(pais => {\r\n                conteoPaises[pais] = (conteoPaises[pais] || 0) + 1;\r\n            });\r\n            \r\n            // Crear el arreglo final con el número de repeticiones de cada país\r\n            const arregloFinal = Object.values(conteoPaises);\r\n            \r\n            paisesTotal.textContent = arregloFinal.length;\r\n\r\n            const ctx = document.getElementById('paises-grafica').getContext('2d');\r\n            const myChart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: paisesSinRepetir,\r\n                    datasets: [{\r\n                        data: arregloFinal,\r\n                        backgroundColor: [\r\n                            '#123C49',\r\n                            '#22728A',\r\n                            '#63BDD8',\r\n                            '#0C2830',\r\n                            '#32A8CC',      \r\n                            '#245D6D',\r\n                            '#398AA8',\r\n                            '#7AC2E2',\r\n                            '#185E7A',\r\n                            '#2A8DAB',\r\n                            '#124749',\r\n                            '#122649'\r\n                        ]\r\n                    }]\r\n                },\r\n                options: {\r\n                    plugins: {\r\n                        legend: {\r\n                            display: false\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","// widget-script.js\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n  var cajaSection = document.querySelector('.criptos');\r\n\r\n  if(cajaSection) {\r\n    var container = document.createElement('div');\r\n    container.className = 'tradingview-widget-container criptomonedas';\r\n  \r\n    var widget = document.createElement('div');\r\n    widget.className = 'tradingview-widget-container__widget';\r\n  \r\n    container.appendChild(widget);\r\n  \r\n    cajaSection.parentNode.insertBefore(container, cajaSection.nextSibling);\r\n  \r\n    var script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js';\r\n    script.async = true;\r\n    container.appendChild(script);\r\n  \r\n    script.innerHTML = `\r\n        {\r\n            \"symbols\": [\r\n                {\r\n                    \"proName\": \"FOREXCOM:SPXUSD\",\r\n                    \"title\": \"S&P 500\"\r\n                },\r\n                {\r\n                    \"proName\": \"FOREXCOM:NSXUSD\",\r\n                    \"title\": \"US 100\"\r\n                },\r\n                {\r\n                    \"proName\": \"BITSTAMP:BTCUSD\",\r\n                    \"title\": \"Bitcoin\"\r\n                },\r\n                {\r\n                    \"proName\": \"BITSTAMP:ETHUSD\",\r\n                    \"title\": \"Ethereum\"\r\n                },\r\n                {\r\n                    \"description\": \"USD/MXN\",\r\n                    \"proName\": \"FX:USDMXN\"\r\n                },\r\n                {\r\n                    \"description\": \"EUR/USD\",\r\n                    \"proName\": \"FX:EURUSD\"\r\n                }\r\n            ],\r\n            \"showSymbolLogo\": true,\r\n            \"colorTheme\": \"dark\",\r\n            \"isTransparent\": false,\r\n            \"displayMode\": \"adaptive\",\r\n            \"locale\": \"es\"\r\n        }\r\n    `;\r\n  }\r\n});\r\n  "]}